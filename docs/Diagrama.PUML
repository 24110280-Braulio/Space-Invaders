@startuml SpaceInvaders

' Clases principales
class Game {
    - tabletop: Tabletop
    - pacFight: PacFight
    - playerHealth: PlayerHealth
    - enemyManager: EnemyManager
    - enemyMovementManager: EnemyMovementManager
    - enemyHealthManager: EnemyHealthManager
    - enemyShooter: EnemyShooter
    - barrier: Barrier
    + EjecutarPrincipal()
    + MostrarMenu()
    + RepetirMenu()
}

class Tabletop {
    - window: sf::RenderWindow
    - fondo: sf::Sprite
    - barreras: vector<Barrier>
    - player: sf::Sprite
    - playerHP: PlayerHealth
    - bulletManager: BulletManager
    - peas: vector<Enemy>
    - peb: vector<Enemy>
    - pec: vector<Enemy>
    + Inicializar()
    + Renderizar()
    + Actualizar()
    + AgregarEntidad(Enemy)
    + RemoverEntidad(Enemy)
    + VerificarColisiones()
    + ObtenerEntidades()
    + ProcesarEntrada(entrada)
    + DibujarFondo()
}

class PacFight {
    - window: sf::RenderWindow
    - fondo: sf::Sprite
    - player: sf::Sprite
    - playerHP: PlayerHealth
    - bullets: vector<sf::Sprite>
    - blinkySprite: sf::Sprite
    - inkySprite: sf::Sprite
    - claydSprite: sf::Sprite
    - pinkySprite: sf::Sprite
    - pacSprite: sf::Sprite
    - goals: vector<GoalObj>
    - pacHP: int
    - pacState: int
    - pacDirection: int
    - pacAnimFrame: int
    - pacAnimTime: float
    - pacAnimInterval: float
    + Inicializar()
    + Actualizar()
    + ProcesarEntrada(entrada)
    + VerificarColisiones()
    + DibujarFondo()
}

class EnemyManager {
    - enemies: vector<Enemy>
    + AddEnemies(textura: sf::Texture&, frameWidth: int, frameHeight: int, numFrames: int, frameTime: float, spacing: int, cantidad: int, startX: float, startY: float, spacingX: float)
    + Update(deltaTime: float)
    + Draw(window: sf::RenderWindow&)
    + MoveEnemiesDown(offsetY: float)
}

class EnemyMovementManager {
    - groups: vector<EnemyMovement>
    + AddEnemyGroup(positions: vector<Vector2f>*, velocities: vector<float>*, directions: vector<float>*, frameWidth: int, bounceLeftX: float, bounceRightX: float)
    + Update(deltaTime: float)
}

class EnemyHealthManager {
    - peaHP: vector<int>
    - pebHP: vector<int>
    - pecHP: vector<int>
    + SetHealths(pea: vector<int>&, peb: vector<int>&, pec: vector<int>&)
    + GetPeaHP(): vector<int>&
    + GetPebHP(): vector<int>&
    + GetPecHP(): vector<int>&
    + DamagePea(idx: int, dmg: int)
    + DamagePeb(idx: int, dmg: int)
    + DamagePec(idx: int, dmg: int)
}

class EnemyShooter {
    - bulletTextures: array<sf::Texture, 4>&
    - bulletSpeed: float
    - frameTime: float
    - bullets: vector<EnemyBullet>
    - rng: mt19937
    + EnemyShooter(bulletTextures: array<sf::Texture, 4>&, bulletSpeed: float, frameTime: float)
    + TryShoot(pos: sf::Vector2f, frameWidth: int, frameHeight: int, shootChance: int): bool
    + UpdateBullets()
    + DrawBullets(window: sf::RenderWindow&)
    + GetBullets(): vector<EnemyBullet>&
}

class Barrier {
    - sprite: sf::Sprite
    - normalTexture: sf::Texture&
    - lowTexture: sf::Texture&
    - hp: int
    - maxHp: int
    + Barrier(normalTex: sf::Texture&, lowTex: sf::Texture&, pos: sf::Vector2f, maxHP=60)
    + TakeDamage(dmg: int)
    + IsAlive(): bool
    + GetSprite(): sf::Sprite&
    + GetHP(): int
}

class Jefe {
    - spriteA: sf::Sprite
    - spriteB: sf::Sprite
    - textureA: sf::Texture
    - textureB: sf::Texture
    - laser1: sf::Sprite
    - laser2: sf::Sprite
    - laserTexture1: sf::Texture
    - laserTexture2: sf::Texture
    - active: bool
    - animTime: float
    - animSwitch: float
    - moveTimer: float
    - originalPos: sf::Vector2f
    - moveRadiusX: float
    - moveRadiusY: float
    - moveSpeed: float
    - useA: bool
    - lasers: vector<sf::Sprite>
    - laserCooldown: float
    - laserTimer: float
    - specialAttackActive: bool
    - specialAttackTimer: float
    - specialAttackDuration: float
    - specialAttackCooldown: float
    - specialAttackElapsed: float
    - specialLaserOn: bool
    - specialLaserTimer: float
    - specialLaserInterval: float
    + Boss(startPos: sf::Vector2f)
    + Update(deltaTime: float, playerPos: sf::Vector2f)
    + Draw(window: sf::RenderWindow&)
    + Appear()
    + IsActive(): bool
    + Reset()
    + GetBounds(): sf::FloatRect
    + Shoot()
    + GetLasers(): vector<sf::Sprite>&
}

class PlayerHealth {
    - hp: int
    - maxHp: int
    - invulnerable: bool
    - invulClock: sf::Clock
    - hpSprite: sf::Sprite
    - hp100Texture: sf::Texture*
    - hp80Texture: sf::Texture*
    - hp60Texture: sf::Texture*
    - hp40Texture: sf::Texture*
    - hp20Texture: sf::Texture*
    - hp0Texture: sf::Texture*
    - timeoutTexture: sf::Texture*
    + PlayerHealth(maxHP=100)
    + setTextures(hp100, hp80, hp60, hp40, hp20, hp0, timeout)
    + takeDamage(dmg)
    + update()
    + isAlive(): bool
    + getHP(): int
    + isInvulnerable(): bool
    + getSprite(): sf::Sprite&
    + restoreFullHealth()
}

class Animacion {
    - sprite: sf::Sprite
    - frameWidth: int
    - frameHeight: int
    - numFrames: int
    - frameTime: float
    - currentFrame: int
    - elapsedTime: float
    - spacing: int
    - peaSpriteA: "PEA.png"
    - peaSpriteB: "PEB.png"
    - peaSpriteC: "PEC.png"
    + Animacion(textura: sf::Texture&, frameWidth: int, frameHeight: int, numFrames: int, frameTime: float, spacing=0)
    + setPosition(x: float, y: float)
    + update(deltaTime: float)
    + draw(window: sf::RenderWindow&)
    + getSprite(): const sf::Sprite&
}

class Player {
    + shoot()
}

class Enemy {
    - animacion: Animacion
    + Enemy(textura: sf::Texture&, frameWidth: int, frameHeight: int, numFrames: int, frameTime: float, spacing: int, x: float, y: float)
    + Update(deltaTime: float)
    + Draw(window: sf::RenderWindow&)
    + GetPosition(): sf::Vector2f
    + SetPosition(pos: sf::Vector2f)
    + GetGlobalBounds(): sf::FloatRect
}

' Relaciones
Game *-- Tabletop
Game *-- PacFight

Tabletop o-- Enemy
Tabletop o-- Jefe
Tabletop *-- "1" Player
Tabletop *-- "4" Barrier

PacFight *-- "1" Player

Player *-- PlayerHealth

Enemy *-- "*" Animacion
Enemy *-- EnemyHealthManager
Enemy *-- EnemyMovementManager
Enemy *-- EnemyShooter
Enemy *-- "*" EnemyManager

@enduml